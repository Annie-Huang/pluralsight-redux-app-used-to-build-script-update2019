https://www.javascriptstuff.com
https://www.javascriptstuff.com/lists/
https://www.javascriptstuff.com/react-starter-projects/
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape
https://redux.js.org/recipes/reducing-boilerplate
https://redux-starter-kit.js.org/
https://github.com/rematch/rematch
https://github.com/infinitered/reduxsauce


https://github.com/webpack-contrib/eslint-loader/issues/209
https://github.com/apexcharts/vue-apexcharts/issues/19
https://github.com/yannickcr/eslint-plugin-react/issues/447




####################################################################################

C:\react\pluralsight-redux-app-used-to-build-script-update2019>git init
C:\react\pluralsight-redux-app-used-to-build-script-update2019>git add .
C:\react\pluralsight-redux-app-used-to-build-script-update2019>git remote add origin git@github.com:Annie-Huang/pluralsight-redux-app-used-to-build-script-update2019.git
C:\react\pluralsight-redux-app-used-to-build-script-update2019>git commit .
C:\react\pluralsight-redux-app-used-to-build-script-update2019>git push -u origin master


Babel can be configured via .babelrc, but I prefer to use package.json

babel-preset-react-app:
    Transpile JSX and modern JS features like Object spread, class properties, dynamic import, and more to run in today's browser.
    This is also the one used in create-react-app

So when you find yourself having to update multiple layers of components just to pass data down to
the child component that actually uses the data, that can be a good time to add some container components
that connect to the Redux store.

Memoization:
One important thing to note is every time the component is updated, the mapStateToProps function is called.
So if you're doing something expensive in there, you'll want to use a library like Reselect for memoizing.
Memoization is like caching for function calls.
Each time a function is called, Reselect checks whether it was just called with those same parameters.
And if it was, it doesn't call the function.
Instead, it just returns the memoized value.
This is useful for increasing performance by avoiding unnecessary operations.
So if you're doing expensive operations in your mapping, for instance filtering, a list, or making expensive calculations,
then memoization can help assure that these expensive operations occur less often.
With Reselect, the selectors that you write in mapStateToProps are efficient because they're only computed
when one of the arguments change.
So if you're doing expensive work in mapStateToProps, consider using the Reselect library.


